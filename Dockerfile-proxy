ARG RUNTIME_IMAGE=debian:bookworm
# ARG RUNTIME_IMAGE=ubuntu:focal
ARG BUILDPLATFORM=linux/amd64

# front-load all the dependencies we need and cache them
FROM $RUNTIME_IMAGE as runtime

RUN apt-get update && apt-get install -y vim procps

# install rust and flamegraph
RUN apt-get update
RUN apt-get install -y software-properties-common
RUN apt-get install -y sudo
RUN apt-get install -y curl
RUN apt-get install -y linux-perf

RUN HOME=/ bash -c "curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y"
ENV PATH="${PATH}:/.cargo/bin"

RUN apt-get install -y build-essential
RUN rustup default stable
RUN cargo install flamegraph

# set perf_event_paranoid, required by perf
RUN su -c "echo 'kernel.perf_event_paranoid = -1' > /etc/sysctl.conf"

# dependency end

# Precompile key slow-to-build dependencies
FROM --platform=$BUILDPLATFORM golang:1.21-alpine as go-deps
WORKDIR /linkerd-build
COPY go.mod go.sum ./
COPY bin/install-deps bin/
RUN go mod download
ARG TARGETARCH
RUN ./bin/install-deps $TARGETARCH

FROM --platform=$BUILDPLATFORM curlimages/curl:7.86.0 as fetch
WORKDIR /build
COPY bin/fetch-proxy bin/fetch-proxy
COPY bin/scurl bin/scurl
COPY .proxy-version proxy-version
ARG TARGETARCH
RUN (proxy=$(bin/fetch-proxy $(cat proxy-version) $TARGETARCH) && \
    mv "$proxy" linkerd2-proxy)
ARG LINKERD_AWAIT_VERSION=v0.2.6
RUN bin/scurl -o linkerd-await https://github.com/linkerd/linkerd-await/releases/download/release%2F${LINKERD_AWAIT_VERSION}/linkerd-await-${LINKERD_AWAIT_VERSION}-${TARGETARCH} && chmod +x linkerd-await
ARG LINKERD_VALIDATOR_VERSION=v0.1.2
RUN bin/scurl -O https://github.com/linkerd/linkerd2-proxy-init/releases/download/validator%2F${LINKERD_VALIDATOR_VERSION}/linkerd-network-validator-${LINKERD_VALIDATOR_VERSION}-${TARGETARCH}.tgz
RUN tar -zxvf linkerd-network-validator-${LINKERD_VALIDATOR_VERSION}-${TARGETARCH}.tgz && mv linkerd-network-validator-${LINKERD_VALIDATOR_VERSION}-${TARGETARCH}/linkerd-network-validator .

## compile proxy-identity agent
FROM go-deps as golang
WORKDIR /linkerd-build
COPY pkg/util pkg/util
COPY pkg/flags pkg/flags
COPY pkg/tls pkg/tls
COPY pkg/version pkg/version
ARG TARGETARCH
RUN CGO_ENABLED=0 GOOS=linux GOARCH=$TARGETARCH go build -mod=readonly ./pkg/...
COPY proxy-identity proxy-identity
RUN CGO_ENABLED=0 GOOS=linux GOARCH=$TARGETARCH go build -o /out/proxy-identity -mod=readonly -ldflags "-s -w" ./proxy-identity

FROM $RUNTIME_IMAGE as runtime
COPY --from=fetch /build/target/proxy/LICENSE /usr/lib/linkerd/LICENSE
COPY --from=fetch /build/proxy-version /usr/lib/linkerd/linkerd2-proxy-version.txt
COPY --from=fetch /build/linkerd2-proxy /usr/lib/linkerd/linkerd2-proxy
COPY --from=fetch /build/linkerd-await /usr/lib/linkerd/linkerd-await
COPY --from=fetch /build/linkerd-network-validator /usr/lib/linkerd/linkerd2-network-validator
COPY --from=golang /out/proxy-identity /usr/lib/linkerd/linkerd2-proxy-identity
COPY --from=debian:bookworm-slim /bin/sleep /bin/sleep

# these dependencies are needed by the linkerd-proxy build steps
# RUN apt-get install -y git cmake clang
# RUN cargo install --locked tokio-console
#
# add test project
# ADD proxy /proxy
# WORKDIR /proxy
# RUN RUSTFLAGS="--cfg tokio_unstable" cargo build --release
# RUN cp target/release/linkerd2-proxy /usr/lib/linkerd/linkerd2-proxy
# WORKDIR /

# fast path for building linkerd-proxy
# assume this is built from the latest source code
COPY proxy/target/release/linkerd2-proxy /usr/lib/linkerd/linkerd2-proxy

# add directory for linkerd proxy logging output
RUN mkdir /logging
RUN chown 2102 /logging

ARG LINKERD_VERSION
ENV LINKERD_CONTAINER_VERSION_OVERRIDE=${LINKERD_VERSION}
# ENV LINKERD2_PROXY_LOG=warn,linkerd=info
ENV LINKERD2_PROXY_LOG=debug
ENV LINKERD2_PROXY_LOG_FORMAT=plain
ENTRYPOINT ["/usr/lib/linkerd/linkerd2-proxy-identity"]
# ENTRYPOINT ["/bin/bash"]
